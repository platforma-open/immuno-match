self := import("@platforma-sdk/workflow-tengo:tpl")
assets:= import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
exec := import("@platforma-sdk/workflow-tengo:exec")
render := import("@platforma-sdk/workflow-tengo:render")
buildExportsTpl := assets.importTemplate(":build-exports")

// Template will wait for the column bundle to be locked and ready
self.awaitState("columnBundle", { wildcard: "*" }, "data", "InputsLocked")
self.awaitState("columnBundle", { wildcard: "*" }, "spec", "ResourceReady")

self.body(func(inputs) {
	
	blockId := inputs.blockId
	anchorCol := inputs.anchorCol
    scKeyAxisSpec := inputs.scKeyAxisSpec
    columnBundle := inputs.columnBundle
	anchorSpec := columnBundle.getSpec(anchorCol)
	// Preparing a CSV table from the column bundle to pass to the ImmunoMatch software (python script)
    tableBuilder := pframes.csvFileBuilder()

	// TableBuilder has access to the resolved PColumns from the columnBundle, but need to select which ones to include
	// The ImmunoMatch software needs to know the column header names. {header: "chosen-header-name"}
	// overrides the default header name in the resulting CSV.
    tableBuilder.add(columnBundle.getColumn(anchorCol), {header: "VH"})
    tableBuilder.add(columnBundle.getColumn("VL"), {header: "VL"})
	tableBuilder.add(columnBundle.getColumn("locus"), {header: "locus"})

	tableBuilder.setAxisHeader(anchorSpec.axesSpec[0].name, "scClonotypeKey")

	// Build the CSV table from the selected PColumns
    fullTable := tableBuilder.build()

	// Import the ImmunoMatch models for Kappa and Lambda chains. They are stored separately from the block
	// to avoid bloating the block bundle with large assets.
	immunomatchKappa := assets.importAsset("@platforma-open/milaboratories.immunomatch-assets:immunomatch-kappa")
	immunomatchLambda := assets.importAsset("@platforma-open/milaboratories.immunomatch-assets:immunomatch-lambda")

    immunoMatch := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.immuno-match.software:immuno-match")).
		// Create directories for the models
		mkDir("immunomatch-lambda").
		mkDir("immunomatch-kappa").
		// Add the models to the appropriate directories in the working directory
		addAsset(immunomatchKappa, "immunomatch-kappa", []).
		addAsset(immunomatchLambda, "immunomatch-lambda", []).
		// Add the tableBuilder created CSV table to the working directory
		addFile("input.csv", fullTable).
		// Pass the model directories and input CSV to the ImmunoMatch software as arguments
		arg("--kappa_dir").arg("immunomatch-kappa").
		arg("--lambda_dir").arg("immunomatch-lambda").
		arg("--input").arg("input.csv").
		// Output the predictions to a CSV file
		arg("--output").arg("predictions.csv").
		// Pass the column names for the VH, VL, and locus columns
		arg("--hseq_col").arg("VH").
		arg("--lseq_col").arg("VL").
		arg("--ltype_col").arg("locus").
		// Save the ImmunoMatch output CSV file to prevent it from being deleted after the template execution
		saveFile("predictions.csv").
		
		printErrStreamToStdout().
		run()
    
	// Get a reference to the ImmunoMatch output CSV file
    predictionsCsv := immunoMatch.getFile("predictions.csv")

	// Calculate default pairing score cutoff
	annotationValues := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.immuno-match.software:default-cutoff")).
		addFile("inputFile.csv", predictionsCsv).
		arg("inputFile.csv").
		saveFileContent("pairing_75.txt").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	// cutoff not accessible in this template, so we pass it to a render template
	// and there prepare the output predictions PFrame with its specs
	cutoff := annotationValues.getFileContent("pairing_75.txt")
	buildExports := render.create(buildExportsTpl, {
		scKeyAxisSpec: scKeyAxisSpec,
		predictionsCsv: predictionsCsv,
		cutoff: cutoff,
		blockId: blockId
	})

	// Get the predictions PFrame from the buildExports template
	predictionsPFrame := buildExports.output("predictionsPFrame")

    return {
		predictionsPf: predictionsPFrame,
		log: immunoMatch.getStdoutStream()
    }
})