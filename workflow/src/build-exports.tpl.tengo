self := import("@platforma-sdk/workflow-tengo:tpl")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
pframes := import("@platforma-sdk/workflow-tengo:pframes")

self.defineOutputs("predictionsPFrame")

self.body(func(args) {

    // Load input values
    cutoff := args.cutoff.getDataAsJson()
    scKeyAxisSpec := args.scKeyAxisSpec
    predictionsCsv := args.predictionsCsv
    blockId := args.blockId
    anchorCol := args.anchorCol

    // Parse the output CSV as a PFrame with one PColumn for the pairing scores
    rawPredictionsPFrame := xsv.importFile(predictionsCsv, "csv",
		{
			axes: [{
				column: "scClonotypeKey",
				spec: scKeyAxisSpec
			}],
			columns: [{
				column: "pairing_scores",
				spec: {
					valueType: "Double",
					name: "pl7.app/immunomatch/pairing_score",
					annotations: {
						"pl7.app/label": "Pairing Score",
						"pl7.app/vdj/receptor": "IG",
						"pl7.app/min": "0",
						"pl7.app/max": "1",
						"pl7.app/isScore": "true",
						"pl7.app/score/rankValues": "increasing",
						"pl7.app/score/defaultCutoff": string(cutoff)
					},
					domain: {
						"pl7.app/blockId": blockId,
						"pl7.app/alphabet": "aminoacid",
						"pl7.app/vdj/feature": "VDJRegion",
						"pl7.app/vdj/scClonotypeChain/index": "primary"
					}
				}
			}]
		},
		{ splitDataAndSpec: true }
	);

    // Make trace for provenance
    anchorSpec := anchorCol.spec
    trace := pSpec.makeTrace(anchorSpec,
	// OR????
	// trace := pSpec.makeTrace(scKeyAxisSpec,
		{
			type: "milaboratories.immuno-match",
			importance: 30,
			label: "ImmunoMatch Pairing Prediction"
		})

    // Apply trace to the predictions
    predictionsPFrame := pframes.pFrameBuilder()
    for id, v in rawPredictionsPFrame {
        predictionsPFrame.add(id, trace.inject(v.spec), v.data)
    }
    predictionsPFrame = predictionsPFrame.build()

    return {
        predictionsPFrame: predictionsPFrame  
    }
})